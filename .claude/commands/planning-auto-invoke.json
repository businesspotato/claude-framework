{
  "name": "planning-auto-invoke",
  "description": "Automatically detect planning requirements and launch appropriate workflow with subagents and Zen MCP",
  "prompt": "Auto-detect task complexity and trigger proper planning workflow:\n\n**Usage**: `/planning-auto-invoke [task-description]`\n\n**Purpose**: Eliminate manual planning workflow invocation by automatically analyzing tasks and triggering appropriate subagents and Zen MCP sessions\n\n**Auto-Detection Workflow**:\n\n1. **Run Planning Checklist Analysis**:\n   - Execute full `/planning-checklist` validation\n   - Capture complexity score and phase requirements\n   - Determine if planning phase is required\n\n2. **Decision Tree**:\n   \n   **SIMPLE Task (0-1 complexity indicators)**:\n   ```\n   ‚Üí Skip planning phase\n   ‚Üí Proceed directly to implementation\n   ‚Üí Document approach in commit message\n   ‚Üí Output: \"‚úÖ Simple task - No planning required\"\n   ```\n   \n   **MEDIUM Task (2 complexity indicators)**:\n   ```\n   ‚Üí Optional lightweight planning\n   ‚Üí Suggest single relevant subagent\n   ‚Üí Document approach before implementing\n   ‚Üí Ask user: \"Proceed with optional planning? [Y/n]\"\n   ```\n   \n   **COMPLEX Task (3+ complexity indicators)**:\n   ```\n   ‚Üí MANDATORY planning phase\n   ‚Üí Auto-launch Zen MCP session\n   ‚Üí Auto-invoke required subagents in sequence\n   ‚Üí Generate planning documentation\n   ‚Üí Output: \"‚ö†Ô∏è  Planning phase activated automatically\"\n   ```\n\n3. **Automatic Zen MCP Session Launch**:\n   \n   When planning required:\n   \n   **Step 1: Initialize Session**\n   ```typescript\n   mcp__zen__chat({\n     message: `Planning session for: [task-description]\n     \n     Context:\n     - Complexity: [COMPLEX]\n     - Multi-service integration: [YES/NO]\n     - Database migration: [YES/NO]\n     - Architectural decision: [YES/NO]\n     \n     Question: What is the optimal approach for this task?\n     Consider: [List of key considerations]\n     `,\n     model: \"o3-mini\"  // or o3 for complex architecture\n   })\n   ```\n   \n   **Step 2: Capture Zen MCP Recommendations**\n   - Parse Zen MCP response\n   - Extract key architectural decisions\n   - Identify recommended approach\n   - Document trade-offs and rationale\n\n4. **Automatic Subagent Invocation Sequence**:\n   \n   **Planning Phase**:\n   ```typescript\n   // Invoke subagents in recommended order\n   Task({\n     subagent_type: \"backend-designer\",\n     prompt: `[Zen MCP insights]\n     \n     Task: [task-description]\n     \n     Required: Design system architecture considering:\n     - [Key consideration 1]\n     - [Key consideration 2]\n     \n     Provide: Architecture diagram, component breakdown, integration points`,\n     description: \"Design system architecture\"\n   })\n   \n   Task({\n     subagent_type: \"database-admin\",\n     prompt: `[Zen MCP insights] + [backend-designer output]\n     \n     Task: [task-description]\n     \n     Required: Design database strategy:\n     - Migration approach\n     - Schema changes\n     - Performance implications\n     \n     Provide: Migration script, rollback plan, testing strategy`,\n     description: \"Design database migration\"\n   })\n   \n   Task({\n     subagent_type: \"jenny\",\n     prompt: `Validate planning phase output:\n     \n     Original requirement: [task-description]\n     Zen MCP recommendation: [summary]\n     Architecture design: [backend-designer summary]\n     Database strategy: [database-admin summary]\n     \n     Verify: Does this approach meet the original requirement?\n     Check: Any gaps or missing considerations?`,\n     description: \"Validate requirements compliance\"\n   })\n   ```\n   \n   **Output Documentation**:\n   - Create planning summary document\n   - Include all subagent outputs\n   - Document architectural decisions\n   - Provide implementation checklist\n\n5. **User Interaction Flow**:\n   \n   **For COMPLEX tasks**:\n   ```\n   ü§ñ Planning Auto-Invoke Activated\n   ================================\n   \n   Task: \"[task-description]\"\n   Complexity: COMPLEX (4/7 indicators)\n   \n   ‚è≥ Step 1/4: Launching Zen MCP session (o3-mini)...\n   ‚úÖ Zen MCP analysis complete\n   \n   üìä Zen MCP Recommendation:\n   [Summary of key insights]\n   \n   ‚è≥ Step 2/4: Invoking backend-designer subagent...\n   ‚úÖ Architecture design complete\n   \n   ‚è≥ Step 3/4: Invoking database-admin subagent...\n   ‚úÖ Database strategy complete\n   \n   ‚è≥ Step 4/4: Invoking jenny validation subagent...\n   ‚úÖ Requirements compliance verified\n   \n   üìÑ Planning Documentation:\n   ‚Üí Saved to: docs/planning/[task-slug]-planning.md\n   \n   üìå Ready to Proceed?\n   Planning phase complete. Review planning doc before implementation.\n   \n   Next steps:\n   1. Review docs/planning/[task-slug]-planning.md\n   2. Confirm approach aligns with requirements\n   3. Proceed to development phase\n   \n   Continue to implementation? [Y/n]\n   ```\n   \n   **For MEDIUM tasks**:\n   ```\n   ü§î Medium Complexity Detected\n   ============================\n   \n   Task: \"[task-description]\"\n   Complexity: MEDIUM (2/7 indicators)\n   \n   üí° Recommended: Brief planning with single subagent\n   Suggested subagent: [subagent-name] ‚Üí [purpose]\n   \n   Options:\n   1. [Y] Invoke [subagent-name] for guidance (recommended)\n   2. [n] Skip planning and proceed to implementation\n   3. [f] Force full planning phase with Zen MCP\n   \n   Your choice: _\n   ```\n   \n   **For SIMPLE tasks**:\n   ```\n   ‚úÖ Simple Task - Direct Implementation\n   ====================================\n   \n   Task: \"[task-description]\"\n   Complexity: SIMPLE (0/7 indicators)\n   \n   No planning required. Proceeding to implementation.\n   \n   Reminder: Document approach in commit message.\n   ```\n\n**Planning Document Template**:\n\nAuto-generated at `docs/planning/[task-slug]-planning.md`:\n\n```markdown\n# Planning: [Task Description]\n\n**Date**: [timestamp]\n**Complexity**: [SIMPLE/MEDIUM/COMPLEX]\n**Planning Phase**: [OPTIONAL/REQUIRED]\n\n## Task Analysis\n\n### Complexity Indicators\n- Multi-file changes: [YES/NO]\n- Multi-service integration: [YES/NO]\n- Database changes: [YES/NO]\n- Performance requirements: [YES/NO]\n- Architectural decisions: [YES/NO]\n- Algorithmic complexity: [YES/NO]\n- Scalability planning: [YES/NO]\n\n### Complexity Score\n[X]/7 ‚Üí [SIMPLE/MEDIUM/COMPLEX]\n\n## Zen MCP Analysis\n\n**Model Used**: o3-mini / o3 / gpt-5-mini\n\n**Key Insights**:\n[Zen MCP output summary]\n\n**Recommended Approach**:\n[Architectural recommendation]\n\n**Trade-offs**:\n- Option A: [pros/cons]\n- Option B: [pros/cons]\n- Selected: [chosen approach + rationale]\n\n## Architecture Design\n\n**Subagent**: backend-designer\n\n[Architecture design output]\n\n**Key Components**:\n1. [Component 1]\n2. [Component 2]\n\n**Integration Points**:\n- [Integration 1]\n- [Integration 2]\n\n## Database Strategy\n\n**Subagent**: database-admin\n\n[Database strategy output]\n\n**Migration Approach**:\n[Migration details]\n\n**Rollback Plan**:\n[Rollback strategy]\n\n## Requirements Validation\n\n**Subagent**: jenny\n\n[Validation output]\n\n**Compliance**: ‚úÖ / ‚ö†Ô∏è / ‚ùå\n\n**Gaps Identified**:\n[List of gaps if any]\n\n## Implementation Checklist\n\n- [ ] [Task 1]\n- [ ] [Task 2]\n- [ ] [Task 3]\n\n## Success Criteria\n\n1. [Criterion 1]\n2. [Criterion 2]\n\n## References\n\n- CLAUDE.md: Automatic Subagent Orchestration\n- Original requirement: [link or description]\n```\n\n**Error Handling**:\n\n```\nIf Zen MCP unavailable:\n  ‚Üí Warn user\n  ‚Üí Fall back to manual subagent invocation\n  ‚Üí Require user approval before proceeding\n  \nIf Subagent fails:\n  ‚Üí Log error\n  ‚Üí Continue with remaining subagents\n  ‚Üí Mark planning as partial\n  ‚Üí Require user review before implementation\n  \nIf User declines planning:\n  ‚Üí Log decision\n  ‚Üí Warn about potential issues\n  ‚Üí Proceed with caution flag\n  ‚Üí Document reason in git commit\n```\n\n**Integration with Existing Commands**:\n\n- Automatically calls `/planning-checklist` internally\n- Works with `/planning-audit` for post-work validation\n- Integrates with existing `/zen-brainstorm` command\n- Compatible with multi-instance workflows\n\n**Usage Examples**:\n\n```bash\n# Example 1: Auto-detect and plan\n/planning-auto-invoke \"Fix unified_prices_v2 missing table issue\"\n\n# Example 2: With custom context\n/planning-auto-invoke \"Implement real-time price updates for collection display with WebSocket integration\"\n\n# Example 3: Force planning even for simple tasks\n/planning-auto-invoke --force \"Add logging to getCardById\"\n```\n\n**Configuration** (optional flags):\n\n```\n--force           Force planning phase even for simple tasks\n--skip-zen        Skip Zen MCP (use subagents only)\n--model=<model>   Override Zen MCP model (o3-mini, o3, gpt-5-mini)\n--no-doc          Skip planning document generation\n--quiet           Minimal output (no progress indicators)\n```\n\n**Exit Codes**:\n\n```\n0  = Planning complete, ready to implement\n1  = Planning skipped (simple task)\n2  = Planning partial (some subagents failed)\n3  = Planning failed (critical error)\n4  = User declined planning\n```\n\nSee: CLAUDE.md (Planning Workflow Enforcement) for integration guidelines"
}
