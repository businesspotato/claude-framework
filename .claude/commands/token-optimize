#!/bin/bash

# Token Optimization Analysis Command
# Analyzes API token usage and provides optimization recommendations
# Usage: /token-optimize [hours]

set -e

# Configuration
DB_PATH="data/database/cards.db"
HOURS=${1:-1}  # Default to last 1 hour
SECONDS_AGO=$((HOURS * 3600))
TIMESTAMP_CUTOFF=$(($(date +%s) - SECONDS_AGO))

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}===============================================${NC}"
echo -e "${BLUE}      Token Optimization Analysis Report      ${NC}"
echo -e "${BLUE}===============================================${NC}"
echo ""
echo -e "Analysis Period: Last ${HOURS} hour(s)"
echo -e "Generated: $(date '+%Y-%m-%d %H:%M:%S')"
echo ""

# Section 1: Overall Statistics
echo -e "${GREEN}📊 Overall Statistics${NC}"
echo -e "${GREEN}────────────────────${NC}"

OVERALL_STATS=$(sqlite3 "$DB_PATH" << EOF
.mode column
.headers on
SELECT
  COUNT(*) as total_calls,
  SUM(tokens_used) as total_tokens,
  ROUND(SUM(estimated_cost), 4) as total_cost_usd,
  ROUND(100.0 * SUM(CASE WHEN cache_hit THEN 1 ELSE 0 END) / COUNT(*), 2) as cache_hit_rate_pct,
  ROUND(AVG(response_time_ms), 0) as avg_response_ms
FROM api_metrics
WHERE timestamp > $TIMESTAMP_CUTOFF;
EOF
)

echo "$OVERALL_STATS"
echo ""

# Section 2: Service Breakdown
echo -e "${GREEN}🔍 Service Breakdown${NC}"
echo -e "${GREEN}───────────────────${NC}"

SERVICE_BREAKDOWN=$(sqlite3 "$DB_PATH" << EOF
.mode column
.headers on
.width 15 10 12 10 12 15 12
SELECT
  service,
  COUNT(*) as calls,
  SUM(tokens_used) as tokens,
  ROUND(SUM(estimated_cost), 4) as cost_usd,
  ROUND(100.0 * SUM(CASE WHEN cache_hit THEN 1 ELSE 0 END) / COUNT(*), 1) as cache_pct,
  ROUND(AVG(response_time_ms), 0) as avg_time_ms,
  ROUND(AVG(batch_size), 1) as avg_batch
FROM api_metrics
WHERE timestamp > $TIMESTAMP_CUTOFF
GROUP BY service
ORDER BY tokens DESC;
EOF
)

echo "$SERVICE_BREAKDOWN"
echo ""

# Section 3: Optimization Opportunities
echo -e "${YELLOW}💡 Optimization Opportunities${NC}"
echo -e "${YELLOW}─────────────────────────────${NC}"

# Check for low cache hit rates
LOW_CACHE_SERVICES=$(sqlite3 "$DB_PATH" "
SELECT service || ' (' || ROUND(100.0 * SUM(CASE WHEN cache_hit THEN 1 ELSE 0 END) / COUNT(*), 1) || '% hit rate)'
FROM api_metrics
WHERE timestamp > $TIMESTAMP_CUTOFF
GROUP BY service
HAVING (100.0 * SUM(CASE WHEN cache_hit THEN 1 ELSE 0 END) / COUNT(*)) < 50
  AND service NOT IN ('local', 'file_ops')
")

if [ -n "$LOW_CACHE_SERVICES" ]; then
  echo -e "${RED}⚠️  Low Cache Hit Rate Services:${NC}"
  echo "$LOW_CACHE_SERVICES" | while read line; do
    echo "   • $line"
  done
  echo "   → Recommendation: Increase cache TTL or implement prefetching"
  echo ""
fi

# Check for unbatched operations
UNBATCHED_COUNT=$(sqlite3 "$DB_PATH" "
SELECT COUNT(*)
FROM api_metrics
WHERE timestamp > $TIMESTAMP_CUTOFF
  AND batch_size = 1
  AND service IN ('azure_ocr', 'ebay', 'apitcg')
")

if [ "$UNBATCHED_COUNT" -gt 5 ]; then
  echo -e "${RED}⚠️  Unbatched Operations Detected:${NC}"
  echo "   • $UNBATCHED_COUNT single-item API calls could be batched"
  echo "   → Recommendation: Enable batching with TOKEN_OPT_BATCHING_ENABLED=true"
  echo ""
fi

# Check for high-frequency services
HIGH_FREQ_SERVICES=$(sqlite3 "$DB_PATH" "
SELECT service || ' (' || COUNT(*) || ' calls)'
FROM api_metrics
WHERE timestamp > $TIMESTAMP_CUTOFF
  AND cache_hit = 0
  AND service NOT IN ('local', 'file_ops')
GROUP BY service
HAVING COUNT(*) > 10
")

if [ -n "$HIGH_FREQ_SERVICES" ]; then
  echo -e "${YELLOW}📈 High-Frequency External Calls:${NC}"
  echo "$HIGH_FREQ_SERVICES" | while read line; do
    echo "   • $line"
  done
  echo "   → Recommendation: Implement aggressive caching for these services"
  echo ""
fi

# Section 4: Cache Performance
echo -e "${GREEN}🎯 Cache Performance${NC}"
echo -e "${GREEN}───────────────────${NC}"

CACHE_PERF=$(sqlite3 "$DB_PATH" << EOF
.mode column
.headers on
SELECT
  CASE
    WHEN cache_hit = 1 THEN 'Cache Hit'
    ELSE 'Cache Miss'
  END as type,
  COUNT(*) as count,
  ROUND(AVG(response_time_ms), 0) as avg_time_ms,
  SUM(tokens_used) as tokens_consumed
FROM api_metrics
WHERE timestamp > $TIMESTAMP_CUTOFF
GROUP BY cache_hit
ORDER BY cache_hit DESC;
EOF
)

echo "$CACHE_PERF"
echo ""

# Section 5: Recent Expensive Operations
echo -e "${GREEN}💰 Most Expensive Recent Operations${NC}"
echo -e "${GREEN}──────────────────────────────────${NC}"

EXPENSIVE_OPS=$(sqlite3 "$DB_PATH" << EOF
.mode column
.headers on
.width 20 15 10 12 8
SELECT
  datetime(timestamp, 'unixepoch', 'localtime') as time,
  service,
  endpoint,
  tokens_used as tokens,
  ROUND(estimated_cost, 4) as cost_usd
FROM api_metrics
WHERE timestamp > $TIMESTAMP_CUTOFF
  AND tokens_used > 0
ORDER BY estimated_cost DESC
LIMIT 5;
EOF
)

echo "$EXPENSIVE_OPS"
echo ""

# Section 6: Trend Analysis (if enough data)
DAYS_OF_DATA=$(sqlite3 "$DB_PATH" "
SELECT COUNT(DISTINCT date(timestamp, 'unixepoch'))
FROM api_metrics
")

if [ "$DAYS_OF_DATA" -gt 1 ]; then
  echo -e "${GREEN}📈 Daily Trend (Last 7 Days)${NC}"
  echo -e "${GREEN}───────────────────────────${NC}"

  DAILY_TREND=$(sqlite3 "$DB_PATH" << EOF
.mode column
.headers on
SELECT
  date(timestamp, 'unixepoch') as date,
  COUNT(*) as calls,
  SUM(tokens_used) as tokens,
  ROUND(SUM(estimated_cost), 2) as cost_usd,
  ROUND(100.0 * SUM(CASE WHEN cache_hit THEN 1 ELSE 0 END) / COUNT(*), 1) as cache_pct
FROM api_metrics
GROUP BY date
ORDER BY date DESC
LIMIT 7;
EOF
)

  echo "$DAILY_TREND"
  echo ""
fi

# Section 7: Active Optimizations Status
echo -e "${GREEN}✅ Active Optimizations${NC}"
echo -e "${GREEN}──────────────────────${NC}"

# Check hooks
if [ -f .claude/hooks/post-tool-use-tokens ]; then
  echo "   ✓ Token tracking hook installed"
else
  echo -e "   ${RED}✗ Token tracking hook missing${NC}"
fi

if [ -f .claude/hooks/user-prompt-submit-cache ]; then
  echo "   ✓ Cache-first enforcer installed"
else
  echo -e "   ${RED}✗ Cache-first enforcer missing${NC}"
fi

# Check environment variables
if [ "$TOKEN_OPT_BATCHING_ENABLED" = "true" ]; then
  echo "   ✓ Request batching enabled"
else
  echo "   ✗ Request batching disabled"
fi

if [ "$TOKEN_OPT_AGGRESSIVE_CACHE" = "true" ]; then
  echo "   ✓ Aggressive caching enabled"
else
  echo "   ✗ Aggressive caching disabled"
fi

if [ "$TOKEN_OPT_PREFETCH_ENABLED" = "true" ]; then
  echo "   ✓ Predictive prefetching enabled"
else
  echo "   ✗ Predictive prefetching disabled"
fi

echo ""

# Section 8: Projected Savings
echo -e "${BLUE}💰 Projected Savings${NC}"
echo -e "${BLUE}───────────────────${NC}"

CURRENT_CACHE_RATE=$(sqlite3 "$DB_PATH" "
SELECT COALESCE(ROUND(100.0 * SUM(CASE WHEN cache_hit THEN 1 ELSE 0 END) / COUNT(*), 2), 0)
FROM api_metrics
WHERE timestamp > $TIMESTAMP_CUTOFF
")

POTENTIAL_CACHE_RATE=80
CURRENT_MONTHLY_COST=$(sqlite3 "$DB_PATH" "
SELECT COALESCE(ROUND(SUM(estimated_cost) * 730 / $HOURS, 2), 0)
FROM api_metrics
WHERE timestamp > $TIMESTAMP_CUTOFF
")

if (( $(echo "$CURRENT_CACHE_RATE < $POTENTIAL_CACHE_RATE" | bc -l) )); then
  SAVINGS_PERCENT=$(echo "scale=2; ($POTENTIAL_CACHE_RATE - $CURRENT_CACHE_RATE) * 0.7" | bc)
  MONTHLY_SAVINGS=$(echo "scale=2; $CURRENT_MONTHLY_COST * $SAVINGS_PERCENT / 100" | bc)

  echo "   Current cache hit rate: ${CURRENT_CACHE_RATE}%"
  echo "   Potential cache hit rate: ${POTENTIAL_CACHE_RATE}%"
  echo "   Estimated monthly cost: \$${CURRENT_MONTHLY_COST}"
  echo -e "   ${GREEN}Potential monthly savings: \$${MONTHLY_SAVINGS}${NC}"
  echo "   Token reduction potential: ~${SAVINGS_PERCENT}%"
else
  echo -e "   ${GREEN}✓ Already optimized! Cache hit rate: ${CURRENT_CACHE_RATE}%${NC}"
fi

echo ""

# Section 9: Recommendations Summary
echo -e "${BLUE}📋 Recommendations Summary${NC}"
echo -e "${BLUE}─────────────────────────${NC}"

RECOMMENDATIONS=0

if [ -z "$TOKEN_OPT_MONITORING_ENABLED" ] || [ "$TOKEN_OPT_MONITORING_ENABLED" != "true" ]; then
  echo "   1. Enable monitoring: export TOKEN_OPT_MONITORING_ENABLED=true"
  RECOMMENDATIONS=$((RECOMMENDATIONS + 1))
fi

if [ "$TOKEN_OPT_BATCHING_ENABLED" != "true" ] && [ "$UNBATCHED_COUNT" -gt 5 ]; then
  echo "   $((RECOMMENDATIONS + 1)). Enable batching: export TOKEN_OPT_BATCHING_ENABLED=true"
  RECOMMENDATIONS=$((RECOMMENDATIONS + 1))
fi

if [ "$TOKEN_OPT_AGGRESSIVE_CACHE" != "true" ] && (( $(echo "$CURRENT_CACHE_RATE < 50" | bc -l) )); then
  echo "   $((RECOMMENDATIONS + 1)). Enable aggressive caching: export TOKEN_OPT_AGGRESSIVE_CACHE=true"
  RECOMMENDATIONS=$((RECOMMENDATIONS + 1))
fi

if [ "$RECOMMENDATIONS" -eq 0 ]; then
  echo -e "   ${GREEN}✓ All recommended optimizations are active!${NC}"
fi

echo ""
echo -e "${BLUE}===============================================${NC}"
echo -e "Run ${GREEN}/token-optimize 24${NC} for daily analysis"
echo -e "Run ${GREEN}/token-rollback${NC} to disable optimizations"
echo -e "${BLUE}===============================================${NC}"