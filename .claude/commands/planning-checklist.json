{
  "name": "planning-checklist",
  "description": "Validate task complexity and planning requirements before starting work",
  "prompt": "Perform comprehensive planning phase validation before starting work:\n\n**Usage**: `/planning-checklist [task-description]`\n\n**Purpose**: Analyze task complexity and determine if planning phase with subagents and Zen MCP is required\n\n**Validation Steps**:\n\n1. **Analyze Task Description**:\n   - Extract key requirements and scope\n   - Identify technical components involved\n   - Determine impact scope (files, services, systems)\n\n2. **Check Complexity Indicators**:\n   ```\n   Multi-file changes (>3 files)                     [YES/NO]\n   Multi-service integration                         [YES/NO]\n   Database schema changes/migrations                [YES/NO]\n   Performance requirements (>1000 ops/sec)          [YES/NO]\n   Architectural decisions required                  [YES/NO]\n   Algorithm complexity (non-trivial logic)          [YES/NO]\n   Scalability planning needed                       [YES/NO]\n   ```\n\n3. **Determine Phase Requirements**:\n   \n   **Simple Task** (0-1 complexity indicators):\n   - Proceed with direct implementation\n   - No planning phase required\n   - No subagent orchestration needed\n   \n   **Medium Task** (2 complexity indicators):\n   - Consider lightweight planning\n   - Optional: Single subagent for guidance\n   - Document approach before implementing\n   \n   **Complex Task** (3+ complexity indicators):\n   - MANDATORY planning phase required\n   - Zen MCP brainstorming session required\n   - Subagent orchestration required\n   - Full Sequential Orchestration Framework applies\n\n4. **Identify Required Subagents**:\n   Based on task domain, select from available subagents:\n   \n   **Planning Phase Subagents**:\n   - `backend-designer` → System architecture, microservices, scalability\n   - `api-designer` → REST/GraphQL design, endpoint contracts\n   - `database-admin` → Schema design, migrations, optimization\n   - `jenny` → Requirements validation, spec compliance\n   \n   **Development Phase Subagents**:\n   - Context-specific agents (e.g., electron-pro, ai-engineer)\n   - `ui-comprehensive-tester` → Test coverage planning\n   - `code-quality-pragmatist` → Anti-pattern prevention\n   \n   **Debugging Phase Subagents**:\n   - `ultrathink-debugger` → Complex debugging, root cause analysis\n   - `code-reviewer` → Security, quality issues\n   \n   **Verification Phase Subagents**:\n   - `task-completion-validator` → Feature validation\n   - `karen` → Reality check, honest assessment\n   - `jenny` → Requirements compliance\n\n5. **Zen MCP Analysis Requirements**:\n   \n   **Required When**:\n   - Multi-service integration detected\n   - Database migration strategy needed\n   - Architectural decision with trade-offs\n   - Performance optimization planning\n   - Complex algorithmic challenges\n   \n   **Recommended Model**:\n   - o3-mini → Standard planning (fastest, cost-effective)\n   - o3 → Complex architectural decisions\n   - gpt-5-mini → Quick collaborative analysis\n   - o3-pro → Critical system design (expensive, deep analysis)\n   \n   **Zen MCP Functions**:\n   - `mcp__zen__planner` → Multi-step planning with revision\n   - `mcp__zen__chat` → Collaborative brainstorming\n   - `mcp__zen__consensus` → Multi-model debate for decisions\n   - `mcp__zen__thinkdeep` → Deep investigation\n   - `mcp__zen__debug` → Systematic troubleshooting\n\n**Output Format**:\n\n```\n📋 Planning Checklist Report\n============================\n\nTask: \"[Task description]\"\n\n✅ Complexity Analysis:\n   • Multi-file changes: [YES/NO] ([X] files)\n   • Multi-service integration: [YES/NO] ([Systems/services])\n   • Database changes: [YES/NO] ([Details])\n   • Performance requirements: [YES/NO] ([Requirements])\n   • Architectural decisions: [YES/NO] ([Decisions])\n   • Algorithmic complexity: [YES/NO] ([Details])\n   • Scalability planning: [YES/NO] ([Requirements])\n\n📊 Complexity Score: [X]/7 → [SIMPLE/MEDIUM/COMPLEX]\n\n⚠️  Planning Phase: [OPTIONAL/RECOMMENDED/REQUIRED]\n\n🔧 Zen MCP Requirement:\n   Status: [NOT NEEDED / RECOMMENDED / REQUIRED]\n   Model: [o3-mini / o3 / gpt-5-mini]\n   Function: [mcp__zen__planner / mcp__zen__chat / etc.]\n   Purpose: [Brief description]\n\n🤖 Required Subagents:\n   Phase: PLANNING\n   1. [subagent-name] → [Purpose]\n   2. [subagent-name] → [Purpose]\n   \n   Phase: DEVELOPMENT\n   1. [subagent-name] → [Purpose]\n   \n   Phase: VERIFICATION\n   1. [subagent-name] → [Purpose]\n\n📌 Next Steps:\n   ✅ Step 1: [Action required]\n   ✅ Step 2: [Action required]\n   ✅ Step 3: [Action required]\n   \n🔗 References:\n   - CLAUDE.md: Automatic Subagent Orchestration\n   - CLAUDE.md: Zen MCP Planning Integration\n   - claude-framework/docs/multiagent.md\n```\n\n**Example 1: Simple Task**\n```\n📋 Planning Checklist Report\n\nTask: \"Add logging to getUserProfile method\"\n\n✅ Complexity Analysis:\n   • Multi-file changes: NO (1 file)\n   • Multi-service integration: NO\n   • Database changes: NO\n   • Performance requirements: NO\n   • Architectural decisions: NO\n   • Algorithmic complexity: NO\n   • Scalability planning: NO\n\n📊 Complexity Score: 0/7 → SIMPLE\n\n⚠️  Planning Phase: OPTIONAL\n\n🔧 Zen MCP Requirement:\n   Status: NOT NEEDED\n   \n🤖 Required Subagents:\n   None - Direct implementation appropriate\n\n📌 Next Steps:\n   ✅ Add logging statements to method\n   ✅ Test locally\n   ✅ Commit changes\n```\n\n**Example 2: Complex Task**\n```\n📋 Planning Checklist Report\n\nTask: \"Migrate user authentication system from sessions to JWT tokens\"\n\n✅ Complexity Analysis:\n   • Multi-file changes: YES (8+ files)\n   • Multi-service integration: YES (Auth, API Gateway, User Service)\n   • Database changes: YES (Add token storage, migrate sessions)\n   • Performance requirements: NO\n   • Architectural decisions: YES (Token refresh strategy, storage approach)\n   • Algorithmic complexity: NO\n   • Scalability planning: YES (Token invalidation at scale)\n\n📊 Complexity Score: 5/7 → COMPLEX\n\n⚠️  Planning Phase: REQUIRED ⚠️\n\n🔧 Zen MCP Requirement:\n   Status: REQUIRED\n   Model: o3-mini (collaborative analysis)\n   Function: mcp__zen__chat\n   Purpose: Authentication migration strategy and security analysis\n\n🤖 Required Subagents:\n   Phase: PLANNING\n   1. backend-designer → Multi-service authentication architecture\n   2. database-admin → Token storage and session migration strategy\n   3. jenny → Verify solution meets security requirements\n   \n   Phase: DEVELOPMENT\n   1. code-quality-pragmatist → Review for security anti-patterns\n   2. database-admin → Implement migration scripts\n   \n   Phase: VERIFICATION\n   1. task-completion-validator → Verify all services updated\n   2. karen → Reality check - authentication actually works?\n   3. code-reviewer → Security audit\n\n📌 Next Steps:\n   ✅ Launch Zen MCP session for migration strategy analysis\n   ✅ Invoke backend-designer for architecture design\n   ✅ Invoke database-admin for migration approach\n   ✅ Document security decisions and rationale\n   ✅ Create implementation plan\n   ✅ Proceed to development phase ONLY after planning complete\n   \n🚫 DO NOT:\n   ❌ Start implementation without planning\n   ❌ Skip Zen MCP security analysis\n   ❌ Skip subagent orchestration\n   ❌ Make authentication decisions without review\n```\n\n**Enforcement**:\n- Run this command BEFORE starting any non-trivial work\n- If COMPLEX task detected, MUST follow recommendations\n- Violations will be caught by `/planning-audit` command\n- CLAUDE.md rule compliance required\n\n**Integration**:\n- Use with `/planning-auto-invoke` for automated workflow\n- Use with `/planning-audit` for post-work compliance validation\n- Part of Sequential Orchestration Framework\n\nSee: claude-framework/docs/multiagent.md for complete workflow documentation"
}
