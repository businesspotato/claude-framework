{
  "name": "planning-audit",
  "description": "Validate completed work followed proper planning procedures and Sequential Orchestration Framework",
  "prompt": "Perform comprehensive planning compliance audit on completed work:\n\n**Usage**: `/planning-audit [timeframe|commit-hash|file-path]`\n\n**Examples**:\n```bash\n/planning-audit                    # Audit recent uncommitted work\n/planning-audit --since=\"2h\"       # Audit last 2 hours\n/planning-audit abc123f            # Audit specific commit\n/planning-audit src/backend/**     # Audit specific files\n```\n\n**Purpose**: Validate that completed work adhered to CLAUDE.md planning requirements, Sequential Orchestration Framework, and proper subagent usage\n\n**Audit Process**:\n\n1. **Identify Work Scope**:\n   ```bash\n   # Uncommitted changes\n   git diff --name-only --diff-filter=ACM\n   git diff --cached --name-only --diff-filter=ACM\n   \n   # Recent commits (default: since last 2 hours)\n   git log --since=\"2 hours ago\" --name-only --oneline\n   \n   # Specific commit\n   git show <commit-hash> --name-only\n   \n   # Specific files\n   ls -la <file-pattern>\n   ```\n\n2. **Analyze Task Complexity**:\n   \n   For each identified change:\n   \n   **Count Complexity Indicators**:\n   ```\n   Files modified:           [X] files\n   Services affected:        [List of services]\n   Database changes:         [YES/NO]\n   IPC handlers modified:    [YES/NO]\n   API integrations added:   [YES/NO]\n   Architecture changes:     [YES/NO]\n   Performance impact:       [YES/NO]\n   ```\n   \n   **Calculate Complexity Score**:\n   ```\n   SIMPLE:  0-1 indicators\n   MEDIUM:  2 indicators\n   COMPLEX: 3+ indicators\n   ```\n\n3. **Check Planning Compliance**:\n   \n   **For COMPLEX tasks (3+ indicators)**:\n   \n   ‚úÖ **Required Checks**:\n   ```\n   ‚ñ° Zen MCP session conducted?\n     ‚Üí Search conversation history for mcp__zen__ calls\n     ‚Üí Check docs/planning/ for planning documents\n   \n   ‚ñ° Subagents invoked in planning phase?\n     ‚Üí Search for Task tool calls with planning subagents\n     ‚Üí Verify: backend-designer, api-designer, database-admin, jenny\n   \n   ‚ñ° Planning documentation created?\n     ‚Üí Check docs/planning/<task-slug>-planning.md exists\n     ‚Üí Verify contains: Zen MCP analysis, subagent outputs, decisions\n   \n   ‚ñ° Architecture review completed?\n     ‚Üí Check for architectural decision documentation\n     ‚Üí Verify trade-offs considered and documented\n   \n   ‚ñ° Sequential Orchestration Framework followed?\n     ‚Üí Planning ‚Üí Development ‚Üí Debugging ‚Üí Verification\n     ‚Üí Verify phase-appropriate subagents used\n   ```\n   \n   **For MEDIUM tasks (2 indicators)**:\n   ```\n   ‚ñ° Lightweight planning conducted?\n     ‚Üí At least one planning subagent OR documented approach\n   \n   ‚ñ° Approach documented?\n     ‚Üí Commit message explains strategy\n     OR\n     ‚Üí Brief planning notes in docs/planning/\n   ```\n   \n   **For SIMPLE tasks (0-1 indicators)**:\n   ```\n   ‚ñ° Direct implementation acceptable ‚úÖ\n   ‚ñ° Approach documented in commit message\n   ```\n\n4. **Conversation History Analysis**:\n   \n   **Search for Planning Evidence**:\n   ```typescript\n   // Look for Zen MCP usage\n   mcp__zen__planner\n   mcp__zen__chat\n   mcp__zen__consensus\n   mcp__zen__thinkdeep\n   mcp__zen__debug\n   \n   // Look for subagent invocations\n   Task({ subagent_type: \"backend-designer\"\n   Task({ subagent_type: \"api-designer\"\n   Task({ subagent_type: \"database-admin\"\n   Task({ subagent_type: \"jenny\"\n   Task({ subagent_type: \"ultrathink-debugger\"\n   Task({ subagent_type: \"karen\"\n   \n   // Look for planning checklist usage\n   /planning-checklist\n   /planning-auto-invoke\n   ```\n   \n   **Flag Missing Evidence**:\n   - COMPLEX task with no Zen MCP calls ‚Üí VIOLATION\n   - COMPLEX task with no subagent invocations ‚Üí VIOLATION\n   - Database migration without database-admin ‚Üí VIOLATION\n   - Multi-service changes without backend-designer ‚Üí VIOLATION\n\n5. **Git Commit Analysis**:\n   \n   **Check Commit Messages**:\n   ```bash\n   git log --since=\"2 hours ago\" --format=\"%H %s %b\"\n   ```\n   \n   **Validate**:\n   - COMPLEX tasks: Should reference planning doc or include rationale\n   - MEDIUM tasks: Should explain approach\n   - SIMPLE tasks: Standard commit message acceptable\n   \n   **Flag Issues**:\n   - COMPLEX task with generic commit message ‚Üí WARNING\n   - No reference to planning documentation ‚Üí WARNING\n   - No architectural decision rationale ‚Üí VIOLATION\n\n6. **Planning Documentation Validation**:\n   \n   **Check for Planning Docs**:\n   ```bash\n   ls -la docs/planning/*-planning.md\n   git log docs/planning/ --since=\"2 hours ago\"\n   ```\n   \n   **Validate Content**:\n   ```\n   ‚ñ° Zen MCP analysis included?\n   ‚ñ° Subagent outputs documented?\n   ‚ñ° Architectural decisions recorded?\n   ‚ñ° Trade-offs considered?\n   ‚ñ° Implementation checklist provided?\n   ‚ñ° Success criteria defined?\n   ```\n   \n   **Quality Check**:\n   - Planning doc created BEFORE implementation? ‚úÖ\n   - Planning doc matches actual implementation? ‚úÖ\n   - All required sections present? ‚úÖ\n\n**Output Format**:\n\n```\nüìä Planning Compliance Audit Report\n===================================\n\n**Audit Scope**: [timeframe / commit / files]\n**Date**: [timestamp]\n\n## Summary\n\n‚úÖ Compliant Tasks:     [X]\n‚ö†Ô∏è  Partial Compliance:  [X]\n‚ùå Violations:           [X]\n\n## Detailed Analysis\n\n### Task 1: \"[Task description from commit/work]\"\n\n**Complexity Analysis**:\n  ‚Ä¢ Files modified: [X] files\n  ‚Ä¢ Services affected: [List]\n  ‚Ä¢ Database changes: [YES/NO]\n  ‚Ä¢ Architecture changes: [YES/NO]\n  ‚Ä¢ Complexity Score: [X]/7 ‚Üí [SIMPLE/MEDIUM/COMPLEX]\n\n**Required Planning**: [OPTIONAL / RECOMMENDED / MANDATORY]\n\n**Compliance Check**:\n  ‚úÖ Zen MCP session: [YES / NO / N/A]\n     ‚Üí Evidence: [mcp__zen__chat call at 14:32]\n     \n  ‚úÖ Subagents invoked: [YES / NO / N/A]\n     ‚Üí Planning phase: [backend-designer, database-admin]\n     ‚Üí Development phase: [code-quality-pragmatist]\n     ‚Üí Verification phase: [karen, jenny]\n     \n  ‚úÖ Planning documentation: [YES / NO / N/A]\n     ‚Üí Location: docs/planning/unified-prices-fix-planning.md\n     ‚Üí Quality: [COMPLETE / PARTIAL / MISSING]\n     \n  ‚úÖ Architecture review: [YES / NO / N/A]\n     ‚Üí Decisions documented: [YES]\n     ‚Üí Trade-offs considered: [YES]\n     \n  ‚úÖ Sequential Framework: [FOLLOWED / PARTIAL / VIOLATED]\n     ‚Üí Phase sequence: Planning ‚Üí Development ‚Üí Verification ‚úÖ\n     ‚Üí Phase-appropriate subagents: [YES]\n\n**Compliance Status**: ‚úÖ COMPLIANT / ‚ö†Ô∏è PARTIAL / ‚ùå VIOLATION\n\n**Violations** (if any):\n  [None]\n\n**Warnings** (if any):\n  [None]\n\n---\n\n### Task 2: \"Fix unified_prices_v2 missing table\"\n\n**Complexity Analysis**:\n  ‚Ä¢ Files modified: 4 files\n  ‚Ä¢ Services affected: Collection, Price Scout, eBay Seller, Portfolio\n  ‚Ä¢ Database changes: YES (table rename, views)\n  ‚Ä¢ Architecture changes: YES (migration strategy)\n  ‚Ä¢ Complexity Score: 4/7 ‚Üí COMPLEX\n\n**Required Planning**: MANDATORY ‚ö†Ô∏è\n\n**Compliance Check**:\n  ‚ùå Zen MCP session: NO\n     ‚Üí Evidence: No mcp__zen__ calls found\n     ‚Üí VIOLATION: COMPLEX task requires Zen MCP\n     \n  ‚ùå Subagents invoked: NO\n     ‚Üí Expected: database-admin, backend-designer, jenny\n     ‚Üí Actual: None\n     ‚Üí VIOLATION: Planning phase subagents not used\n     \n  ‚ùå Planning documentation: NO\n     ‚Üí Expected: docs/planning/unified-prices-fix-planning.md\n     ‚Üí Actual: Not found\n     ‚Üí VIOLATION: No planning document created\n     \n  ‚ùå Architecture review: NO\n     ‚Üí No architectural decision documentation\n     ‚Üí VIOLATION: Migration strategy not reviewed\n     \n  ‚ùå Sequential Framework: VIOLATED\n     ‚Üí Jumped directly to investigation/implementation\n     ‚Üí Skipped planning phase entirely\n\n**Compliance Status**: ‚ùå VIOLATION\n\n**Violations**:\n  1. ‚ùå Zen MCP not used for COMPLEX multi-service integration\n  2. ‚ùå Planning phase subagents not invoked (database-admin, backend-designer)\n  3. ‚ùå No planning documentation created\n  4. ‚ùå Architecture review skipped for database migration\n  5. ‚ùå Sequential Orchestration Framework violated\n\n**Warnings**:\n  ‚ö†Ô∏è  Commit message lacks architectural rationale\n  ‚ö†Ô∏è  No reference to planning process in git history\n\n**Impact**:\n  ‚Ä¢ Migration strategy not validated by database-admin\n  ‚Ä¢ Multi-service impact not assessed by backend-designer\n  ‚Ä¢ Requirement compliance not verified by jenny\n  ‚Ä¢ Risk of incomplete or incorrect implementation\n\n**Corrective Actions Required**:\n  1. PAUSE current implementation\n  2. Run /planning-auto-invoke \"Fix unified_prices_v2 missing table\"\n  3. Conduct proper Zen MCP analysis\n  4. Invoke required subagents (database-admin, backend-designer, jenny)\n  5. Document architectural decisions\n  6. Review and adjust implementation based on planning insights\n  7. Re-audit with /planning-audit after corrections\n\n---\n\n## Compliance Summary\n\n**Violation Categories**:\n\nüö´ **Critical Violations** (MUST FIX):\n  1. COMPLEX task without Zen MCP: [X] occurrences\n  2. Planning phase subagents not invoked: [X] occurrences\n  3. Sequential Framework violated: [X] occurrences\n\n‚ö†Ô∏è  **Warnings** (SHOULD FIX):\n  1. Missing planning documentation: [X] occurrences\n  2. Insufficient commit message rationale: [X] occurrences\n  3. Architecture review incomplete: [X] occurrences\n\n**Recommendation**:\n\n[IF VIOLATIONS FOUND]:\n‚ö†Ô∏è  **ACTION REQUIRED**\n\nYour recent work contains [X] critical planning violations.\nThese violations indicate improper workflow adherence.\n\n**Next Steps**:\n1. Review violated tasks above\n2. For each COMPLEX task:\n   a. Run /planning-auto-invoke with task description\n   b. Conduct proper planning phase\n   c. Review and adjust implementation\n3. Create planning documentation retroactively if missing\n4. Re-run /planning-audit to verify corrections\n\n**Why This Matters**:\n- Planning prevents architectural mistakes\n- Subagents provide expert validation\n- Zen MCP catches multi-dimensional issues\n- Sequential framework ensures quality\n- Skipping planning = Technical debt\n\n[IF NO VIOLATIONS]:\n‚úÖ **EXCELLENT COMPLIANCE**\n\nAll recent work followed proper planning procedures.\nNo violations or warnings detected.\n\nContinue following Sequential Orchestration Framework:\n  Planning ‚Üí Development ‚Üí Debugging ‚Üí Verification\n\n**Enforcement**:\n\n```\nSeverity Levels:\n  VIOLATION   = Must fix before proceeding\n  WARNING     = Should fix, best practice\n  INFO        = Optional improvement\n  \nAutomatic Actions:\n  3+ VIOLATIONS   ‚Üí Block further work, require planning\n  1-2 VIOLATIONS  ‚Üí Strong warning, recommend planning\n  Warnings only   ‚Üí Advisory, continue with caution\n  No issues       ‚Üí Proceed normally\n```\n\n**Integration**:\n\n- Run automatically before commits (git pre-commit hook)\n- Run automatically before pull requests (CI/CD)\n- Run manually to check recent work\n- Part of code review checklist\n\n**Configuration** (optional flags):\n\n```\n--since=<time>      Audit work since timeframe (2h, 1d, 1w)\n--commit=<hash>     Audit specific commit\n--files=<pattern>   Audit specific file pattern\n--strict            Treat warnings as violations\n--fix               Auto-generate missing planning docs (interactive)\n--report=<file>     Save report to file\n```\n\nSee: CLAUDE.md (Planning Workflow Enforcement) for compliance requirements"
}
